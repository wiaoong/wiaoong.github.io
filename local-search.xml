<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>本地文件上传到github</title>
    <link href="/2020/01/16/git/"/>
    <url>/2020/01/16/git/</url>
    
    <content type="html"><![CDATA[<p>本地文件上传到github</p><a id="more"></a><h2 id="上传步骤记录"><a href="#上传步骤记录" class="headerlink" title="上传步骤记录"></a>上传步骤记录</h2><pre><code class="batch">    git init    git add .    git commit -m &quot;上传&quot;    git remote add origin 你的github地址    git push -u origin master     //强制上传    git push -u origin +master    //移除origin,重新添加    git remote rm origin    git remote add origin xxxx</code></pre>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
      <category>github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux多Tomcat部署</title>
    <link href="/2020/01/15/linux%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/01/15/linux%E5%A4%9ATomcat%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>linux下多Tomcat部署</p><a id="more"></a><h2 id="步骤1：安装完tomcat后-直接在原目录下复制一份-分别重命名为tomcat1-tomcat2"><a href="#步骤1：安装完tomcat后-直接在原目录下复制一份-分别重命名为tomcat1-tomcat2" class="headerlink" title="步骤1：安装完tomcat后,直接在原目录下复制一份,分别重命名为tomcat1,tomcat2"></a>步骤1：安装完tomcat后,直接在原目录下复制一份,分别重命名为tomcat1,tomcat2</h2><h2 id="步骤2-到根目录-etc-profile中添加如下部署"><a href="#步骤2-到根目录-etc-profile中添加如下部署" class="headerlink" title="步骤2:到根目录 /etc/profile中添加如下部署"></a>步骤2:到根目录 /etc/profile中添加如下部署</h2><pre><code>export JAVA_HOME=/usr/local/jdk/jdk1.8.0_211export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH##上边不变,新增如下#tomcat1export CATALINA_HOME=/usr/local/tomcat/tomcat1export CATALINA_BASE=/usr/local/tomcat/tomcat1export TOMCAT_HOME=/usr/local/tomcat/tomcat1#tomcat2export CATALINA_HOME2=/usr/local/tomcat/tomcat2export CATALINA_BASE2=/usr/local/tomcat/tomcat2export TOMCAT_HOME2=/usr/local/tomcat/tomcat2</code></pre><h2 id="步骤3：修改tomcat2的conf下server-xml中的端口-不重复就行"><a href="#步骤3：修改tomcat2的conf下server-xml中的端口-不重复就行" class="headerlink" title="步骤3：修改tomcat2的conf下server.xml中的端口,不重复就行"></a>步骤3：修改tomcat2的conf下server.xml中的端口,不重复就行</h2><pre><code class="xml">&lt;Server port=&quot;8006&quot; shutdown=&quot;SHUTDOWN&quot;&gt;...&lt;Connector port=&quot;8081&quot; protocol=&quot;HTTP/1.1&quot;               connectionTimeout=&quot;20000&quot;               redirectPort=&quot;8444&quot; /&gt;&lt;Connector port=&quot;8010&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8444&quot; /&gt;...</code></pre><p>这些端口和tomcat1的配置不冲突就行。</p><h2 id="步骤4：修改tomcat2的startup-sh"><a href="#步骤4：修改tomcat2的startup-sh" class="headerlink" title="步骤4：修改tomcat2的startup.sh"></a>步骤4：修改tomcat2的startup.sh</h2><pre><code class="batch"># Check that target executable existsif $os400; then  # -x will Only work on the os400 if the files are:  # 1. owned by the user  # 2. owned by the PRIMARY group of the user  # this will not work if the user belongs in secondary groups  evalelse  if [ ! -x &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; ]; then    echo &quot;Cannot find $PRGDIR/$EXECUTABLE&quot;    echo &quot;The file is absent or does not have execute permission&quot;    echo &quot;This file is needed to run this program&quot;    exit 1  fifi#添加这两行export CATALINA_HOME=$CATALINA_HOME2export CATALINA_BASE=$CATALINA_BASE2exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</code></pre><hr><p>ok,到此,tomcat2就可以正常启动了,不影响tomcat1的运行</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2020/01/10/nginx/"/>
    <url>/2020/01/10/nginx/</url>
    
    <content type="html"><![CDATA[<p>Nginx 安装、Nginx 配置文件</p><a id="more"></a><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><pre><code class="conf">...              #全局块events {         #events块   ...}http      #http块{    ...   #http全局块    server        #server块    {         ...       #server全局块        location [PATTERN]   #location块        {            ...        }        location [PATTERN]         {            ...        }    }    server    {      ...    }    ...     #http全局块}</code></pre><div style="text-align:center"><img src="/img/nginx/nginx_conf.png" srcset="/img/loading.gif"/></div><h2 id="linux-部署Nginx"><a href="#linux-部署Nginx" class="headerlink" title="linux 部署Nginx"></a>linux 部署Nginx</h2><pre><code class="cmd">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel  yum install -y pcre pcre-devel openssl openssl-devel gcc gcc gcc-c++ ncurses-devel perltar -zxvf nginx-1.7.6.tar.gz  cd nginx-1.7.6./configure   makemake install  ##切换到/usr/local/nginx 目录$ cd sbin$ ./nginx查找是否安装软件yum list installed | grep ruby</code></pre>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo建博客,使用Fluid主题</title>
    <link href="/2020/01/09/hexo+fluid/"/>
    <url>/2020/01/09/hexo+fluid/</url>
    
    <content type="html"><![CDATA[<p>Hexo+github.io模式配置简单,功能强大,没有服务器也可创建属于自己的在线博客</p><a id="more"></a><h2 id="如何使用Hexo创建博客"><a href="#如何使用Hexo创建博客" class="headerlink" title="如何使用Hexo创建博客"></a>如何使用Hexo创建博客</h2><h3 id="下载nodejs"><a href="#下载nodejs" class="headerlink" title="下载nodejs"></a>下载nodejs</h3><p><a href="http://nodejs.cn/" target="_blank" rel="noopener">nodejs下载地址</a><br>下载后直接安装,用下边命令查看是否安装成功</p><pre><code>node -v</code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code class="cmd">npm install -g hexo-cli或者yarn global add heox-cli</code></pre><p>输入<code>hexo -v</code>查看安装情况</p><pre><code class="cmd">C:\Users\Administrator&gt;hexo -vhexo-cli: 3.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 10.15.3v8: 6.8.275.32-node.51uv: 1.23.2zlib: 1.2.11ares: 1.15.0modules: 64nghttp2: 1.34.0napi: 3openssl: 1.1.0jicu: 62.1unicode: 11.0cldr: 33.1tz: 2018e</code></pre><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><p>创建一个文件夹 </p><pre><code class="cmd"> mkdir myhexo</code></pre><p> 切换到myhexo</p><pre><code class="cmd">  cd myhexo</code></pre><p> 通过hexo命令创建博客框架</p><pre><code class="cmd"> hexo init</code></pre><p>接下来编译，启动 访问 localhost:4000</p><pre><code class="cmd">hexo generate //可以简写成 hexo ghexo server   //可以简写成 hexo s  还可以自定义端口 -P 8080</code></pre><h2 id="如何使用Fluid主题"><a href="#如何使用Fluid主题" class="headerlink" title="如何使用Fluid主题"></a>如何使用Fluid主题</h2><p><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">github地址</a></p><p>这个主题的配置文档的特别全,参考文档即可<br><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">Fluid配置指南</a></p><h2 id="如何把博客提交到github-利用xxx-github-io访问博客"><a href="#如何把博客提交到github-利用xxx-github-io访问博客" class="headerlink" title="如何把博客提交到github,利用xxx.github.io访问博客"></a>如何把博客提交到github,利用xxx.github.io访问博客</h2><p>　　第一步就是创建一个 <code>your_github_name.github.io</code>仓库<br>　　第二部设置SSH 供远程提交用<br>　　<br>　　这两步都很简单不做说明了。<br>　　<br>　　第三步配置<code>your_github_name.github.io</code>仓库的地址地址到Hexo的deploy</p><pre><code>deploy:  type: git  repo: git@github.com:wiaoong/wiaoong.github.io.git //换成自己的  branch: master</code></pre><p>　　第四步安装deploy插件(执行这条命令要在 Hexo init的路径下)</p><pre><code class="cmd">yarn add hexo-deployer-git </code></pre><p>　　最后可执行提交到github命令</p><pre><code class="cmd">hexo g -d //提交到github,这条命令是编译和提交的组合</code></pre><p>　　此时,访问你的<code>your_github_name.github.io</code> 已经能看到了。</p><h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><p>百度统计的设置<br><a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a><br>到这里注册个账号-&gt;添加网站-&gt;获取JS</p><div style="text-align:center"><img src="/img/baidu1.png" srcset="/img/loading.gif"/></div><div style="text-align:center"><img src="/img/baidu2.png" srcset="/img/loading.gif"/></div><p>到Hexo的_config.yml中配置</p><pre><code class="yml">web_analytics:  # 网页访问统计  enable: true  baidu:  58bfd1bebe5f57cef4efafa23de7d01e # 百度统计的Key，参见 https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376 代码获取中 hm.js? 后边的字符串  google:  # Google统计的Tracking ID，参见 https://analytics.google.com/analytics/web/  tencent:  # 腾讯统计的H5 App id，参见 https://mta.qq.com/h5/manage/ctr_app_manage  woyaola:  # 51.la站点统计ID，参见 https://www.51.la/user/site/index  cnzz:  # 友盟/cnzz站点统计web_id，参见 https://web.umeng.com/main.php?c=site&amp;a=show</code></pre><h2 id="评论-gittalk"><a href="#评论-gittalk" class="headerlink" title="评论-gittalk"></a>评论-gittalk</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>偶尔,xxx.github.io会抽风,访问不了,用代理能访问</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hello</title>
    <link href="/2020/01/09/hello-world/"/>
    <url>/2020/01/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
